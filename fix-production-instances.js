#!/usr/bin/env node
// üéØ FIX INSTANCIAS EN PRODUCCI√ìN
// Script para conectar instancias existentes en Evolution API con la BD de producci√≥n

require('dotenv').config();
const axios = require('axios');

const LOCATION_ID = 'jtEqGdhkoR6iePmZaCmd';
const PRODUCTION_URL = 'https://whatsapp.cloude.es';

async function fixProductionInstances() {
    try {
        console.log('üî• SOLUCIONANDO INSTANCIAS EN PRODUCCI√ìN');
        console.log(`üìç Location ID: ${LOCATION_ID}`);
        console.log(`üåê Production URL: ${PRODUCTION_URL}`);

        // 1. CREAR CLIENTE EN PRODUCCI√ìN
        console.log('\n1Ô∏è‚É£ Registrando cliente en producci√≥n...');
        
        try {
            const response = await axios.post(`${PRODUCTION_URL}/api/ghl/install`, {
                locationId: LOCATION_ID,
                companyName: 'RAY ALVARADO - PRODUCTION FIX',
                email: 'ray@cloude.es'
            }, {
                headers: { 'Content-Type': 'application/json' },
                timeout: 30000
            });

            console.log('‚úÖ Respuesta producci√≥n:', response.data);
        } catch (error) {
            console.log('‚ö†Ô∏è Error o cliente ya existe:', error.message);
        }

        // 2. GENERAR QR CODES DIRECTAMENTE
        console.log('\n2Ô∏è‚É£ Generando QR codes para todas las instancias...');
        
        for (let position = 1; position <= 5; position++) {
            try {
                console.log(`   üîÑ Generando QR para instancia ${position}...`);
                
                const response = await axios.post(
                    `${PRODUCTION_URL}/api/instances/${LOCATION_ID}/${position}/connect`, 
                    {},
                    {
                        headers: { 'Content-Type': 'application/json' },
                        timeout: 20000
                    }
                );

                if (response.data.success) {
                    console.log(`   ‚úÖ QR generado para instancia ${position}`);
                } else {
                    console.log(`   ‚ö†Ô∏è Error generando QR ${position}:`, response.data.error);
                }
            } catch (error) {
                console.log(`   ‚ùå Error instancia ${position}:`, error.message);
            }

            // Esperar entre requests
            await new Promise(resolve => setTimeout(resolve, 2000));
        }

        // 3. VERIFICAR ESTADO FINAL
        console.log('\n3Ô∏è‚É£ Verificando estado final...');
        
        try {
            const response = await axios.get(`${PRODUCTION_URL}/api/instances/${LOCATION_ID}`);
            
            if (response.data.success) {
                console.log(`üìä Total instancias: ${response.data.instances.length}`);
                response.data.instances.forEach(instance => {
                    const hasQR = instance.qr_code ? '‚úÖ Con QR' : '‚ùå Sin QR';
                    console.log(`   ${instance.position}: ${instance.status} - ${hasQR}`);
                });
            } else {
                console.log('‚ùå Error verificando instancias:', response.data.error);
            }
        } catch (error) {
            console.log('‚ùå Error en verificaci√≥n:', error.message);
        }

        console.log('\nüéØ FIX COMPLETADO');
        console.log(`üì± Dashboard: ${PRODUCTION_URL}/dashboard/${LOCATION_ID}`);
        console.log(`üîß Admin: ${PRODUCTION_URL}/admin-super`);

    } catch (error) {
        console.error('üí• ERROR CR√çTICO:', error);
        process.exit(1);
    }
}

// Ejecutar
if (require.main === module) {
    fixProductionInstances()
        .then(() => {
            console.log('\n‚úÖ FIX DE PRODUCCI√ìN COMPLETADO');
            process.exit(0);
        })
        .catch(error => {
            console.error('\nüí• FIX FALL√ì:', error);
            process.exit(1);
        });
}