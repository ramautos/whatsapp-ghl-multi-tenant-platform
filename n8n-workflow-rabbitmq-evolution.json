{
  "name": "Evolution RabbitMQ ‚Üí GoHighLevel SMS Scanner",
  "nodes": [
    {
      "parameters": {
        "mode": "receive",
        "queue": {
          "queue": "evolution_v2",
          "options": {
            "durable": true,
            "arguments": {}
          }
        },
        "options": {
          "acknowledge": "executionFinishesSuccessfully",
          "reconnect": true,
          "reconnectLimit": 10
        }
      },
      "id": "rabbitmq-trigger-evolution",
      "name": "RabbitMQ Evolution Trigger",
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1,
      "position": [240, 340],
      "credentials": {
        "rabbitmq": {
          "id": "rabbitmq-evolution-creds",
          "name": "RabbitMQ Evolution Connection"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.event }}",
              "rightValue": "messages.upsert",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "leftValue": "={{ $json.instance }}",
              "rightValue": "ray",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "leftValue": "={{ $json.data.key.fromMe }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "filter-evolution-rabbitmq",
      "name": "Filter: Evolution RabbitMQ",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 340]
    },
    {
      "parameters": {
        "jsCode": "// üê∞ PROCESAMIENTO RABBITMQ EVOLUTION API\nconst data = $input.all()[0].json;\n\nconsole.log('üê∞ RabbitMQ Evolution mensaje recibido:', JSON.stringify(data, null, 2));\n\n// Verificar formato Evolution desde RabbitMQ\nif (!data.event || !data.instance || !data.data) {\n  throw new Error('‚ùå Formato RabbitMQ Evolution inv√°lido');\n}\n\n// Verificar que no es nuestro mensaje\nif (data.data.key.fromMe) {\n  throw new Error('‚è≠Ô∏è Mensaje enviado por nosotros, ignorar');\n}\n\n// Extraer datos del formato Evolution\nconst messageData = data.data;\nconst messageKey = messageData.key;\nconst messageContent = messageData.message;\n\n// Extraer n√∫mero de tel√©fono\nconst fromNumber = messageKey.remoteJid.replace('@s.whatsapp.net', '');\n\n// Extraer texto del mensaje\nconst messageText = messageContent.conversation || \n                   messageContent.extendedTextMessage?.text || \n                   messageContent.imageMessage?.caption || \n                   'Mensaje multimedia';\n\n// Formatear n√∫mero telef√≥nico\nconst cleanPhone = fromNumber.startsWith('1') ? fromNumber : `1${fromNumber}`;\nconst formattedPhone = `+${cleanPhone}`;\n\n// Datos para crear contacto en GHL\nconst contactData = {\n  locationId: 'jtEqGdhkoR6iePmZaCmd',\n  phone: formattedPhone,\n  firstName: data.pushName || 'WhatsApp User',\n  lastName: '',\n  tags: ['whatsapp', 'evolution-api', 'rabbitmq', 'sms-scanner'],\n  customField: {\n    whatsapp_name: data.pushName || '',\n    source: 'Evolution API V2 RabbitMQ - Ray Instance',\n    last_message_preview: messageText.substring(0, 100),\n    instance: data.instance,\n    message_timestamp: messageData.messageTimestamp,\n    transport: 'rabbitmq'\n  }\n};\n\n// Datos para el mensaje en GHL\nconst ghlMessageData = {\n  locationId: 'jtEqGdhkoR6iePmZaCmd',\n  type: 'SMS',\n  message: messageText,\n  direction: 'inbound'\n};\n\nconsole.log('‚úÖ Datos procesados para GHL via RabbitMQ:', { \n  contactData, \n  ghlMessageData,\n  originalSender: data.sender \n});\n\nreturn {\n  contactData,\n  messageData: ghlMessageData,\n  phoneNumber: formattedPhone,\n  originalMessage: messageData,\n  evolutionData: data,\n  timestamp: new Date().toISOString(),\n  transport: 'rabbitmq'\n};"
      },
      "id": "process-rabbitmq-evolution",
      "name": "Procesar RabbitMQ Evolution",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 280]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/contacts/",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={{ JSON.stringify($json.contactData) }}"
      },
      "id": "create-ghl-contact-rabbitmq",
      "name": "Crear Contacto GHL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "ghl-api-credentials",
          "name": "GoHighLevel API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/conversations/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\n  \"locationId\": \"{{ $json.messageData.locationId }}\",\n  \"contactId\": \"{{ $node['Crear Contacto GHL'].json.contact.id }}\",\n  \"type\": \"SMS\",\n  \"message\": \"{{ $json.messageData.message }}\",\n  \"direction\": \"inbound\"\n}"
      },
      "id": "create-ghl-message-rabbitmq",
      "name": "Crear Mensaje GHL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 340],
      "credentials": {
        "httpHeaderAuth": {
          "id": "ghl-api-credentials",
          "name": "GoHighLevel API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ‚úÖ SUCCESS LOG PARA RABBITMQ\nconst result = $input.all()[0].json;\n\nconsole.log('üéâ √âXITO COMPLETO - RabbitMQ Evolution ‚Üí GHL:');\nconsole.log('üìû Contacto creado:', result.contactData);\nconsole.log('üí¨ Mensaje creado:', result.messageData);\nconsole.log('üìä Transport: RabbitMQ');\nconsole.log('‚è∞ Timestamp:', result.timestamp);\n\nreturn {\n  success: true,\n  message: 'Mensaje Evolution procesado correctamente via RabbitMQ',\n  transport: 'rabbitmq',\n  contactId: result.contactData ? 'created' : 'failed',\n  messageId: result.messageData ? 'created' : 'failed',\n  phone: result.phoneNumber,\n  instance: 'ray',\n  timestamp: result.timestamp\n};"
      },
      "id": "success-log-rabbitmq",
      "name": "Success Log RabbitMQ",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 340]
    },
    {
      "parameters": {
        "jsCode": "// ‚ùå ERROR HANDLER RABBITMQ\nconst error = $input.all()[0];\nconsole.log('‚ùå ERROR en RabbitMQ Evolution SMS Scanner:', error);\n\nreturn {\n  success: false,\n  error: error.error || 'Error desconocido',\n  timestamp: new Date().toISOString(),\n  instance: 'ray',\n  transport: 'rabbitmq',\n  workflow_type: 'evolution_rabbitmq_ghl'\n};"
      },
      "id": "error-handler-rabbitmq",
      "name": "Error Handler RabbitMQ",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 460]
    }
  ],
  "connections": {
    "RabbitMQ Evolution Trigger": {
      "main": [
        [
          {
            "node": "Filter: Evolution RabbitMQ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Evolution RabbitMQ": {
      "main": [
        [
          {
            "node": "Procesar RabbitMQ Evolution",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler RabbitMQ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar RabbitMQ Evolution": {
      "main": [
        [
          {
            "node": "Crear Contacto GHL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear Contacto GHL": {
      "main": [
        [
          {
            "node": "Crear Mensaje GHL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear Mensaje GHL": {
      "main": [
        [
          {
            "node": "Success Log RabbitMQ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["evolution-api", "rabbitmq", "gohighlevel", "whatsapp", "sms-scanner"],
  "triggerCount": 1,
  "updatedAt": "2025-01-22T05:00:00.000Z",
  "versionId": "3"
}